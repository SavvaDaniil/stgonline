@using STG.ViewModels.Package;
@model PackageInfoViewModel;

@{
    @using Microsoft.AspNetCore.Antiforgery
    @inject IAntiforgery antiforgery
    var tokenSet = antiforgery.GetAndStoreTokens(Context);
}


<button class="btn btn-open-chat active" id="btn-open-chat" onclick="openCloseChat()">
    <svg xmlns="http://www.w3.org/2000/svg" height="100" width="100" class="svg-riple @(Model.isAnyUnreadByUser ? "active" : "")">
        <defs>
            <g id="anims">
                <circle id="rp1" r="1em" />
                <circle id="rp2" r="1em" />
                <circle id="rp3" r="1em" />
                <circle id="rp4" r="1em" />
            </g>
        </defs>
        <rect height="100%" width="100%" />
        <use xlink:href="#anims" x="50%" y="50%" />
        <circle r="0.01em" cx="50%" cy="50%" />
    </svg>
    <img src="~/images/btn-chat.svg" class="img-fluid" />
</button>

<div class="widget-chat" id="widget-chat">
    <div class="widget-chat-header">
        <div class="row">
            <div class="col-10" style="padding:0;">
                <div class="mentor">
                    <img src="@Model.teacherLiteViewModel.posterSrc" class="img-fluid" />
                    <p>@Model.teacherLiteViewModel.name</p>
                </div>
            </div>
            <div class="col-2" style="padding:0;">
                <button type="button" class="close" aria-label="Close" onclick="openCloseChat()">
                    <img src="~/images/close.png" class="img-fluid" />
                </button>
            </div>
        </div>


    </div>
    <div class="widget-chat-body">
        <div class="row widget-chat-content" id="widget-chat-content">

        </div>
    </div>
    <div class="widget-chat-footer">
        <form id="formChat" onsubmit="return false;" autocomplete="off">
            <button type="button" class="btn btn-chat" onclick="send_message()">
                <img src="~/images/chat-send.svg" class="img-fluid" />
            </button>
            <input type="text" class="form-control" name="message" maxlength="1000" placeholder="Сообщение" onkeypress="formChatSubmit(event)" />
        </form>
    </div>
</div>

<script>
    function formChatSubmit(e) {
        if (e.keyCode == 13) {
            send_message();
        }
    }

    var isChatLoaded = false;
    var isChatActive = false;

    function openCloseChat() {
        if (!isChatLoaded) {
            loadChat();
        }
        chatControl();
    }

    function loadChat() {
        //var btn = document.getElementById("btn-open-chat");
        isChatLoaded = true;
        var form = new FormData();
        form.append("id_of_package", @Model.id);

        $.ajax({
            method: 'POST',
            type: "POST",
            url:  "/api/package_chat/get",
            data: form,
            cashe: false,
            processData: false,
            contentType: false,
            beforeSend: function (xhr) {
                xhr.setRequestHeader('@tokenSet.HeaderName', '@tokenSet.RequestToken');
            },
            error:function(){
                alert("Ошибка соединения с сервером");
                //btnDisabled(btn, false);
            },
            success: function(html)
            {
                if (html["status"] == "success") {
                    var chatContent = document.getElementById("widget-chat-content");
                    chatContent.innerHTML = "";
                    if (html["packageChatMessages"] != null && typeof (html["packageChatMessages"]) != "undefined") {
                        for (var i = 0; i < html["packageChatMessages"].length; i++) {
                            chatContent.appendChild(buildMessageChat(html["packageChatMessages"][i]));
                        }
                    }
                    chatContent.scrollTop = chatContent.scrollHeight;
                    //chatControl();
                    var svgAnimationNotRead = document.getElementById("btn-open-chat").getElementsByClassName("svg-riple")[0];
                    if (svgAnimationNotRead.classList.contains("active")) svgAnimationNotRead.classList.remove("active");
                } else {
                    $("#warning").html("Неизвестная ошибка на сервере");
                }
                //btnDisabled(btn, false);
            }
        });
    }

    function chatControl() {
        var chat = document.getElementById("widget-chat");
        var btnOpenChat = document.getElementById("btn-open-chat");
        if (isChatActive) {
            chat.classList.remove("active");
            btnOpenChat.classList.add("active");
            isChatActive = false;
        } else {
            chat.classList.add("active");
            btnOpenChat.classList.remove("active");
            isChatActive = true;
        }
    }

    function buildMessageChat(content) {
        var divcol12 = document.createElement("div");
        divcol12.className = "col-12";
        var divMessage = document.createElement("div");
        divMessage.className = "chat-message";
        if (content["user0_teacher1"] == 1) divMessage.classList.add("admin");

        var text = document.createElement("p");
        text.innerHTML = content["message"];
        divMessage.appendChild(text);

        var date = document.createElement("p");
        date.className = "chat-message-date";
        date.innerHTML = content["date_of_add"];
        divMessage.appendChild(date);

        divcol12.appendChild(divMessage);
        return divcol12;
    }


    var isMessagSending = false;
    function send_message() {

        var form = new FormData(document.getElementById("formChat"));
        if (form.get("message") == "") {
            return;
        }
        form.set("id_of_package", "@Model.id");

        if (isMessagSending) return;
        isMessagSending = true;

        $.ajax({
            method: 'POST',
            type: "POST",
            url: "/api/package_chat/message_from_user",
            data: form,
            cashe: false,
            processData: false,
            contentType: false,
            beforeSend: function (xhr) {
                xhr.setRequestHeader('@tokenSet.HeaderName', '@tokenSet.RequestToken');
            },
            error: function () {
                alert("Ошибка соединения с сервером");
                isMessagSending = false;
            },
            success: function (html) {
                if (html["status"] == "success") {
                    document.getElementById("formChat").reset();
                    loadChat();
                } else {
                    alert("Извините, на сервере произошла неизвестная ошибка");
                }
                isMessagSending = false;
            }
        });
    }
</script>





